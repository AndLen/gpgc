
parent.0 = ec.params

##Had to remove parts of parents so could use defaults, so had to copy rest of all of them here...


# We're using the standard initialization method
init = 					ec.simple.SimpleInitializer

# We're using the standard (empty) finalization method
finish = 	        		ec.simple.SimpleFinisher

# We're using the standard (empty) exchange method
exch = 					ec.simple.SimpleExchanger

# We're using standard breeding -- no cross-population breeding
breed =					ec.simple.SimpleBreeder

# We're using standard evaluation -- no coevolution
eval =					ec.simple.SimpleEvaluator

# We're using simple statistics
stat =					ec.simple.SimpleStatistics

quit-on-run-complete =			true


# ec.Initializer
# ==============================

pop = 					ec.Population









state = 				ec.simple.SimpleEvolutionState

init = ec.gp.GPInitializer

stat.num-children = 1
stat.child.0 = featureCreate.gp.FeatureCreatorStatistics


#
# Here we define the default values for Crossover,
# Reproduction, Mutation, as well as our selection
# approaches (Koza I).  These can be overridden on a per-species
# level of course.
#

# Reproduction will use Tournament Selection
breed.reproduce.source.0 = ec.select.TournamentSelection

# Crossover will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
gp.koza.xover.source.0 = ec.select.TournamentSelection
gp.koza.xover.source.1 = same
gp.koza.xover.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.xover.ns.1 = same
gp.koza.xover.maxdepth = 17
# This is the default for Koza and lil-gp, though it's
# a little wimpy; on the other hand, a higher number can
# make things really slow
gp.koza.xover.tries = 1


# Point Mutation will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
# and GROW for building.  Also, Point Mutation uses a GrowBuilder
# by default, with a default of min-depth=max-depth=5
# as shown a ways below
gp.koza.mutate.source.0 = ec.select.TournamentSelection
gp.koza.mutate.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.mutate.build.0 = ec.gp.koza.GrowBuilder
gp.koza.mutate.maxdepth = 17
# This is the default for Koza and lil-gp, though it's
# a little wimpy; on the other hand, a higher number can
# make things really slow
gp.koza.mutate.tries = 1


#
# The default tournament size for TournamentSelection is 7
#

select.tournament.size = 7




gp.nc.size = 4

gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = nc0
gp.nc.0.returns = nil
gp.nc.0.size = 0

gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = nc1
gp.nc.1.returns = nil
gp.nc.1.size = 1
gp.nc.1.child.0 = nil

gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = nc2
gp.nc.2.returns = nil
gp.nc.2.size = 2
gp.nc.2.child.0 = nil
gp.nc.2.child.1 = nil

gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = nc3
gp.nc.3.returns = nil
gp.nc.3.size = 3
gp.nc.3.child.0 = nil
gp.nc.3.child.1 = nil
gp.nc.3.child.2 = nil

# We specify a few things about ADFs  -- what kind
# of stack they use, and what kind of context
#

gp.problem.stack = ec.gp.ADFStack
gp.adf-stack.context = ec.gp.ADFContext

#
# Here we define the default values for KozaNodeSelection;
# as always, these can be overridden by values hanging off
# of the Crossover/Reproduction/Mutation/whatever pipelines,
# like we did for node-building, but hey, whatever.
# The default is 10% terminals, 90% nonterminals when possible,
# 0% "always pick the root", 0% "pick any node"

gp.koza.ns.terminals = 0.1
gp.koza.ns.nonterminals = 0.9
gp.koza.ns.root = 0.0




# Here we define a single atomic type, "nil", which everyone will use.
# There are no set types defined.

gp.type.a.size = 1
gp.type.a.0.name = nil
gp.type.s.size = 0

# Here we define one GPTreeConstraints object, "tc0",
# which uses ec.gp.koza.HalfBuilder to create nodes,
# only allows nodes from the GPFunctionSet "fset",
# and has the single type "nil" as its tree type.
# You don't need to include the class declaration here,
# but it quiets warnings.

gp.tc.size = 1
gp.tc.0 = ec.gp.GPTreeConstraints
gp.tc.0.name = tc0
gp.tc.0.fset = f0
gp.tc.0.returns = nil

# The tree uses an ec.gp.koza.HalfBuilder to create
# itself initially.
# HalfBuilder will pick GROW half the time and FULL
# the other half, with a ramp from 2 to 6 inclusive.
# By ramp we mean that it first picks a random number between
# 2 and 6 inclusive.  This then becomes the *maximum* tree size
# (for the FULL approach, it's the tree size of the tree, for
# GROW, the tree can get no bigger than this)

gp.tc.0.init = ec.gp.koza.HalfBuilder



# We have one function set, of class GPFunctionSet
gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet
# We'll call the function set "f0".
gp.fs.0.name = f0

# We have five functions in the function set.  They are:
gp.fs.0.size = 16
gp.fs.0.func.0 = gp.MultiXSubPopNode
gp.fs.0.func.0.nc = nc0
gp.fs.0.func.1 = gp.Add
gp.fs.0.func.1.nc = nc2

gp.fs.0.func.2 = gp.Mul
gp.fs.0.func.2.nc = nc2

gp.fs.0.func.3 = gp.Max
gp.fs.0.func.3.nc = nc2
gp.fs.0.func.4 = gp.Min
gp.fs.0.func.4.nc = nc2
gp.fs.0.func.5 = gp.Sin
gp.fs.0.func.5.nc = nc1

gp.fs.0.func.6 = gp.Tanh
gp.fs.0.func.6.nc = nc1
gp.fs.0.func.7 = gp.If
gp.fs.0.func.7.nc = nc3

gp.fs.0.func.8 = gp.Log
gp.fs.0.func.8.nc = nc1

gp.fs.0.func.9 = gp.Tan
gp.fs.0.func.9.nc = nc1

gp.fs.0.func.10 = gp.Exp
gp.fs.0.func.10.nc = nc1

gp.fs.0.func.11 = gp.Sqrt
gp.fs.0.func.11.nc = nc1

gp.fs.0.func.12 = gp.Square
gp.fs.0.func.12.nc = nc1

gp.fs.0.func.13 = gp.Cube
gp.fs.0.func.13.nc = nc1


gp.fs.0.func.14 = gp.Neg
gp.fs.0.func.14.nc = nc1


gp.fs.0.func.15 = gp.Pow
gp.fs.0.func.15.nc = nc2


#gp.fs.0.func.4 = gp.Div
#gp.fs.0.func.4.nc = nc2
#gp.fs.0.func.2 = gp.Sub
#gp.fs.0.func.2.nc = nc2

#gp.fs.0.func.16 = gp.DoubleConstantNode
#gp.fs.0.func.16.nc = nc0
eval.problem = featureCreate.gp.AdversarialFeatureCreatorProblem
eval.problem.data = gp.DoubleData

evalthreads = 6
generations = 200

print-params = true

ec.subpop = ec.Subpopulation
ec.subpop.size = 100
ec.subpop.duplicate-retries = 100
ec.subpop.species = featureCreate.gp.AdversarialSpecies
gp.species.ind = ec.gp.GPIndividual
gp.species.fitness = featureCreate.gp.AdversarialFitness
gp.species.pipe = ec.breed.MultiBreedingPipeline
breed.multibreed.num-sources = 2
breed.multibreed.source.0 = ec.gp.koza.CrossoverPipeline
gp.koza.xover.prob = 0.60
breed.multibreed.source.1 = ec.gp.koza.MutationPipeline
gp.koza.mutate.prob = 0.40

#breed.elite.0 = 10


# We set the default for HalfBuilder to be a ramp of 2--6,
# with a grow probability of 0.5
gp.koza.half.min-depth = 2
gp.koza.half.max-depth = 6
gp.koza.half.growp = 0.5

gp.koza.xover.maxdepth = 15
gp.koza.mutate.maxdepth = 15
gp.koza.grow.min-depth = 2
gp.koza.grow.max-depth = 15
gp.koza.half.min-depth = 2
gp.koza.half.max-depth = 15



eval = ec.coevolve.MultiPopCoevolutionaryEvaluator
#eval.subpop.0.num-elites = 5
eval.num-current = 3
eval.num-elites = 2
eval.num-shuffled = 3
eval.num-prev = 0
eval.select-current = ec.select.RandomSelection
eval.select-prev = ec.select.TournamentSelection
#pop.subpops =